Project Overview
You are building TravelfAI, an MVP (v1.0) for an AI-powered multi-city trip planner focused on 20 European cities. The site should be a Next.js + TypeScript application, styled with Material-UI, and rely on static JSON data and browser LocalStorage—no external APIs or databases for MVP. The core feature is an itinerary recommendation engine exposed as a Next.js API route (/api/recommendTrip).

1. Tech Stack & Dependencies

Framework: Next.js (latest) with TypeScript

UI Library: Material-UI (MUI v5) + Emotion (@mui/material, @emotion/react, @emotion/styled, @mui/icons-material)

State & Storage: React Hooks + LocalStorage

Version Control: Git (assume GitHub)

Deployment: Ready to deploy on Vercel

Dev Tools: ESLint + Prettier for linting/formatting

2. Data
In public/data/, include these static JSON files:

transportOptions.json: defines transport links between the 20 cities ("CityA→CityB": [{ mode, durationHrs, cost }, …])

pois_{city}.json (one per city): 5–10 POIs with fields { id, name, category, popularityScore }

trendingThemes.json: array of { name, example } objects for homepage suggestions

3. API Route

/pages/api/recommendTrip.ts

Input: JSON { origin, durationDays, maxBudget, transportPreference[], interests[], departureDate }

Logic: Implement the greedy heuristic:

Read transportOptions.json and pois_{city}.json

For each day up to durationDays:

Filter feasible next-city transport by user prefs, budget, time

Score candidate cities by summing POI matches to interests

Pick top city, deduct cost/time, then select 2–3 top POIs for the day

Return { tripDays: TripDay[], totalCost, totalTravelTime, remainingBudget }

Types: Define TypeScript interfaces for request/response, TransportOption, Poi, and TripDay.

4. Pages & Components

pages/index.tsx (Homepage)

On load, read recentTrips from LocalStorage (via useRecentTrips hook).

If history exists, show a RecentTripCard with “Re-Run Trip” button.

Else, show a TrendingThemesCarousel (from trendingThemes.json).

Always display the TripRequestForm.

On submit, POST to /api/recommendTrip, show loading spinner, then render TripPlanDisplay with the results.

pages/favorites.tsx

Read favorites from LocalStorage (via useFavorites hook).

Display a list of saved items (activities and transport legs) with “Remove” buttons.

Component Structure

components/TripRequestForm.tsx

MUI form controls: origin autocomplete, duration dropdown, budget input, transport checkboxes, interests multi-select, departure date.

components/TripPlanDisplay.tsx

Iterate tripDays → render a TransportCard and multiple ActivityCard per day, plus a summary card.

Include a “Save This Trip” button to write full plan to savedTrips in LocalStorage.

components/TransportCard.tsx

Displays from→to, mode icon, duration, cost, and a heart icon to toggle in favorites.

components/ActivityCard.tsx

Shows time, name, category, and a heart icon for favorites.

components/RecentTripCard.tsx

Shows last trip’s summary and a button to re-run the saved parameters.

components/TrendingThemesCarousel.tsx

Simple MUI carousel or grid of theme cards that pre-fill/trigger the form.

Hooks

hooks/useRecentTrips.ts → manages localStorage.recentTrips (max 5 contexts).

hooks/useFavorites.ts → manages localStorage.favorites for individual items.

(Optionally) hooks/useSavedTrips.ts → for full trip storage under localStorage.savedTrips.

5. Styling & Theming

Wrap in <ThemeProvider theme={createTheme({ /* optional overrides */ })}> and <CssBaseline />.

Use MUI’s sx prop for spacing and layout; drop in <Box>, <Grid>, <Container> as needed.

Keep custom CSS minimal—rely on MUI components for consistency.

6. Testing & QA

Use a tool like Postman or VS Code’s REST Client to validate /api/recommendTrip outputs before wiring up the UI.

Manually test edge cases: 1-day trips, zero budget, no feasible transport, etc.

7. Deployment

Ensure the package.json scripts (dev, build, start) work.

Connect the GitHub repo to Vercel for CI/CD; no environment variables are needed for the static-data MVP.

Deliverable
A complete Next.js + TypeScript + Material-UI project that:

Runs locally with npm install && npm run dev.

Provides a working homepage, API route, and favorites page.

Persists user history and favorites in LocalStorage.

Uses static JSON under /public/data/ for transport and POI data.

Is styled consistently with Material-UI and ready for Vercel deployment.

Please scaffold the full project structure, install dependencies, implement the API logic, build out the pages/components/hooks as described, and include a README with setup and usage instructions.